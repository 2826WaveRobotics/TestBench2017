// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "CANTalon.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::motorSystemSysMotor1;
std::shared_ptr<SpeedController> RobotMap::motorSystemSysMotor2;
std::shared_ptr<SpeedController> RobotMap::motorSystemSysMotor3;
std::shared_ptr<SpeedController> RobotMap::motorSystemSysMotor4;
std::shared_ptr<SpeedController> RobotMap::benchDriveRearLeft1;
std::shared_ptr<SpeedController> RobotMap::benchDriveRearRight1;
std::shared_ptr<SpeedController> RobotMap::benchDriveFrontLeft1;
std::shared_ptr<SpeedController> RobotMap::benchDriveFrontRight1;
std::shared_ptr<SpeedController> RobotMap::testMotorsTestMotor1;
std::shared_ptr<SpeedController> RobotMap::testMotorsTestMotor2;
std::shared_ptr<SpeedController> RobotMap::testMotorsTestMotor3;
std::shared_ptr<SpeedController> RobotMap::testMotorsTestMotor4;
std::shared_ptr<Compressor> RobotMap::compressorSubsystemWaveCompressor;
std::shared_ptr<Solenoid> RobotMap::compressorSubsystemSolenoid1;
std::shared_ptr<Solenoid> RobotMap::compressorSubsystemSolenoid2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    motorSystemSysMotor1.reset(new TalonSRX(4));
    lw->AddActuator("MotorSystem", "SysMotor1", std::static_pointer_cast<TalonSRX>(motorSystemSysMotor1));
    
    motorSystemSysMotor2.reset(new TalonSRX(5));
    lw->AddActuator("MotorSystem", "SysMotor2", std::static_pointer_cast<TalonSRX>(motorSystemSysMotor2));
    
    motorSystemSysMotor3.reset(new TalonSRX(6));
    lw->AddActuator("MotorSystem", "SysMotor3", std::static_pointer_cast<TalonSRX>(motorSystemSysMotor3));
    
    motorSystemSysMotor4.reset(new TalonSRX(7));
    lw->AddActuator("MotorSystem", "SysMotor4", std::static_pointer_cast<TalonSRX>(motorSystemSysMotor4));
    
    benchDriveRearLeft1.reset(new TalonSRX(2));
    lw->AddActuator("BenchDrive", "RearLeft1", std::static_pointer_cast<TalonSRX>(benchDriveRearLeft1));
    
    benchDriveRearRight1.reset(new TalonSRX(3));
    lw->AddActuator("BenchDrive", "RearRight1", std::static_pointer_cast<TalonSRX>(benchDriveRearRight1));
    
    benchDriveFrontLeft1.reset(new TalonSRX(0));
    lw->AddActuator("BenchDrive", "FrontLeft1", std::static_pointer_cast<TalonSRX>(benchDriveFrontLeft1));
    
    benchDriveFrontRight1.reset(new TalonSRX(1));
    lw->AddActuator("BenchDrive", "FrontRight1", std::static_pointer_cast<TalonSRX>(benchDriveFrontRight1));
    
    testMotorsTestMotor1.reset(new TalonSRX(8));
    lw->AddActuator("TestMotors", "TestMotor1", std::static_pointer_cast<TalonSRX>(testMotorsTestMotor1));
    
    testMotorsTestMotor2.reset(new TalonSRX(9));
    lw->AddActuator("TestMotors", "TestMotor2", std::static_pointer_cast<TalonSRX>(testMotorsTestMotor2));
    
    testMotorsTestMotor3.reset(new TalonSRX(10));
    lw->AddActuator("TestMotors", "TestMotor3", std::static_pointer_cast<TalonSRX>(testMotorsTestMotor3));
    
    testMotorsTestMotor4.reset(new Talon(11));
    lw->AddActuator("TestMotors", "TestMotor4", std::static_pointer_cast<Talon>(testMotorsTestMotor4));
    
    compressorSubsystemWaveCompressor.reset(new Compressor(0));
    
    
    compressorSubsystemSolenoid1.reset(new Solenoid(0, 0));
    lw->AddActuator("CompressorSubsystem", "Solenoid1", compressorSubsystemSolenoid1);
    
    compressorSubsystemSolenoid2.reset(new Solenoid(0, 1));
    lw->AddActuator("CompressorSubsystem", "Solenoid2", compressorSubsystemSolenoid2);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
