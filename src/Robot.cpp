// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<MotorSystem> Robot::motorSystem;
std::shared_ptr<BenchDrive> Robot::benchDrive;
std::shared_ptr<TestMotors> Robot::testMotors;
//std::shared_ptr<CompressorSubsystem> Robot::compressorSubsystem;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    motorSystem.reset(new MotorSystem());
    benchDrive.reset(new BenchDrive());
    testMotors.reset(new TestMotors());
//    compressorSubsystem.reset(new CompressorSubsystem());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();

	output1 = 0.0;
	output2 = 0.0;
	button1Pressed = false;
	button2Pressed = false;
	button3Pressed = false;
	button4Pressed = false;
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
//	double LeftSide = oi->getDriverJoystick()->GetRawAxis(0);
//	double RightSide = oi->getDriverJoystick()->GetRawAxis(2);
//	benchDrive->TankDrive(LeftSide, RightSide);

	if(oi->getDriverJoystick()->GetRawButton(1)){ //check button value
		button1Pressed = true;
	}
	if (oi->getDriverJoystick()->GetRawButton(2)){
		button2Pressed = true;
	}
	if (oi->getDriverJoystick()->GetRawButton(3)){
			button3Pressed = true;
	}
	if (oi->getDriverJoystick()->GetRawButton(4)){
			button4Pressed = true;
	}

	if(!(oi->getDriverJoystick()->GetRawButton(1)) && button1Pressed){ //check button value
		output1=(output1+.05);
		button1Pressed = false;
	}
	else if (!(oi->getDriverJoystick()->GetRawButton(2)) && button2Pressed){
		output1=(output1-.05); //hi
		button2Pressed = false;
	}

	if(output1>1){
		output1 = 1;
	}
	else if (output1<0){
		output1=0;
	}

	if(!(oi->getDriverJoystick()->GetRawButton(3)) && button3Pressed){ //check button value
		output2=(output2+.05);
		button3Pressed = false;
	}
	else if (!(oi->getDriverJoystick()->GetRawButton(4)) && button4Pressed){
		output2=(output2-.05); //hi
		button4Pressed = false;
	}

	if(output2>1){
		output2 = 1;
	}
	else if (output2<0){
		output2=0;
	}

	RobotMap::motorSystemSysMotor1.get()->Set(output1);
	RobotMap::motorSystemSysMotor2.get()->Set(output2);
	std::cout<<"Output: " << output1 <<", Output: " << output2 << std::endl;
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

